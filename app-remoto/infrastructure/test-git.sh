#!/bin/bash
# Script de teste do sistema Git

echo "üß™ Testando Sistema de Versionamento Git"
echo "=========================================="
echo ""

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Carregar .env
if [ -f "../../keys/.env" ]; then
    source ../../keys/.env
    echo -e "${GREEN}‚úÖ keys/.env carregado${NC}"
else
    echo -e "${RED}‚ùå keys/.env n√£o encontrado${NC}"
    exit 1
fi

# Testar vari√°veis
echo ""
echo "üìã Verificando vari√°veis:"
echo "------------------------"

if [ -n "$GITHUB_TOKEN" ]; then
    echo -e "${GREEN}‚úÖ GITHUB_TOKEN${NC} configurado"
else
    echo -e "${RED}‚ùå GITHUB_TOKEN${NC} n√£o encontrado"
fi

if [ -n "$GITHUB_USER" ]; then
    echo -e "${GREEN}‚úÖ GITHUB_USER${NC} = $GITHUB_USER"
else
    echo -e "${YELLOW}‚ö†Ô∏è  GITHUB_USER${NC} n√£o configurado (atualizar keys/.env)"
fi

if [ -n "$GITHUB_REPO" ]; then
    echo -e "${GREEN}‚úÖ GITHUB_REPO${NC} = $GITHUB_REPO"
else
    echo -e "${RED}‚ùå GITHUB_REPO${NC} n√£o encontrado"
fi

# Testar Git
echo ""
echo "üîç Verificando Git:"
echo "-------------------"

if git --version > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Git instalado${NC}"
else
    echo -e "${RED}‚ùå Git n√£o instalado${NC}"
    exit 1
fi

# Testar branch
BRANCH=$(git branch --show-current 2>/dev/null)
if [ -n "$BRANCH" ]; then
    echo -e "${GREEN}‚úÖ Branch atual${NC} = $BRANCH"
else
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o est√° em um reposit√≥rio Git${NC}"
fi

# Testar vers√£o
echo ""
echo "üì¶ Verificando vers√£o:"
echo "----------------------"

if [ -f "../.version" ]; then
    VERSION=$(cat ../.version)
    echo -e "${GREEN}‚úÖ Vers√£o${NC} = $VERSION"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .version n√£o encontrado${NC}"
fi

# Testar Makefile
echo ""
echo "üîß Verificando Makefile:"
echo "------------------------"

if [ -f "Makefile" ]; then
    echo -e "${GREEN}‚úÖ Makefile encontrado${NC}"
    
    # Testar comando
    if make version > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ make version funciona${NC}"
    else
        echo -e "${RED}‚ùå make version falhou${NC}"
    fi
else
    echo -e "${RED}‚ùå Makefile n√£o encontrado${NC}"
fi

# Testar GitHub API
echo ""
echo "üåê Testando GitHub API:"
echo "-----------------------"

if [ -n "$GITHUB_TOKEN" ]; then
    RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user)
    
    if echo "$RESPONSE" | grep -q "login"; then
        LOGIN=$(echo "$RESPONSE" | grep -o '"login":"[^"]*"' | cut -d'"' -f4)
        echo -e "${GREEN}‚úÖ Token v√°lido${NC} (usu√°rio: $LOGIN)"
    else
        echo -e "${RED}‚ùå Token inv√°lido ou expirado${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Token n√£o configurado${NC}"
fi

# Resumo
echo ""
echo "=========================================="
echo "üìä Resumo:"
echo "=========================================="

if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_USER" ] && [ -f "Makefile" ]; then
    echo -e "${GREEN}‚úÖ Sistema pronto para uso!${NC}"
    echo ""
    echo "Pr√≥ximos passos:"
    echo "  1. make version"
    echo "  2. make save MSG=\"test: primeiro commit\""
    echo "  3. make help"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Configura√ß√£o incompleta${NC}"
    echo ""
    echo "A√ß√µes necess√°rias:"
    [ -z "$GITHUB_TOKEN" ] && echo "  - Adicionar GITHUB_TOKEN em keys/.env"
    [ -z "$GITHUB_USER" ] && echo "  - Adicionar GITHUB_USER em keys/.env"
    [ ! -f "Makefile" ] && echo "  - Criar Makefile"
fi

echo ""
