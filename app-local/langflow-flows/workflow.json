{
  "nodes": [
    {
      "id": "note-zVep6",
      "data": {
        "id": "note-zVep6",
        "node": {
          "template": {
            "backgroundColor": "neutral"
          },
          "description": "# 🏛️ JUSCASH\nAnalisa processos conforme POL-1 a POL-8\n\n1. Cole dados do processo\n2. Agent analisa\n3. Retorna: approved/rejected/incomplete",
          "display_name": "",
          "documentation": ""
        },
        "type": "note"
      },
      "type": "noteNode",
      "dragging": false,
      "measured": {
        "width": 575,
        "height": 630
      },
      "position": {
        "x": 294.76270647080946,
        "y": -110.21604364757196
      },
      "selected": false
    },
    {
      "id": "note-8cx3i",
      "data": {
        "id": "note-8cx3i",
        "node": {
          "template": {
            "backgroundColor": "transparent"
          },
          "description": "### 💡 Add your OpenAI API key here👇",
          "display_name": "",
          "documentation": ""
        },
        "type": "note"
      },
      "type": "noteNode",
      "measured": {
        "width": 324,
        "height": 324
      },
      "position": {
        "x": 1648.6876745095624,
        "y": 253.8646618156497
      },
      "selected": false
    },
    {
      "id": "ChatInput-AuPr0",
      "data": {
        "id": "ChatInput-AuPr0",
        "node": {
          "key": "ChatInput",
          "beta": false,
          "icon": "MessagesSquare",
          "score": 0.0020353564437605998,
          "edited": false,
          "frozen": false,
          "legacy": false,
          "pinned": false,
          "outputs": [
            {
              "name": "message",
              "cache": true,
              "types": [
                "Message"
              ],
              "value": "__UNDEFINED__",
              "method": "message_response",
              "selected": "Message",
              "tool_mode": true,
              "allows_loop": false,
              "display_name": "Chat Message",
              "group_outputs": false
            }
          ],
          "category": "inputs",
          "metadata": {},
          "template": {
            "code": {
              "info": "",
              "list": false,
              "name": "code",
              "show": true,
              "type": "code",
              "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        # Ensure files is a list and filter out empty/None values\n        files = self.files if self.files else []\n        if files and not isinstance(files, list):\n            files = [files]\n        files = [f for f in files if f is not None and f != \"\"]\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=files,\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
              "dynamic": true,
              "advanced": true,
              "password": false,
              "required": true,
              "fileTypes": [],
              "file_path": "",
              "multiline": true,
              "title_case": false,
              "placeholder": "",
              "load_from_db": false
            },
            "_type": "Component",
            "files": {
              "info": "Files to be sent with the message.",
              "list": true,
              "name": "files",
              "show": true,
              "type": "file",
              "value": "",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "fileTypes": [
                "csv",
                "json",
                "pdf",
                "txt",
                "md",
                "mdx",
                "yaml",
                "yml",
                "xml",
                "html",
                "htm",
                "docx",
                "py",
                "sh",
                "sql",
                "js",
                "ts",
                "tsx",
                "jpg",
                "jpeg",
                "png",
                "bmp",
                "image"
              ],
              "file_path": "",
              "temp_file": true,
              "title_case": false,
              "_input_type": "FileInput",
              "placeholder": "",
              "display_name": "Files",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "sender": {
              "info": "Type of sender.",
              "name": "sender",
              "show": true,
              "type": "str",
              "value": "User",
              "dynamic": false,
              "options": [
                "Machine",
                "User"
              ],
              "advanced": true,
              "combobox": false,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "DropdownInput",
              "placeholder": "",
              "display_name": "Sender Type",
              "dialog_inputs": {},
              "options_metadata": [],
              "trace_as_metadata": true
            },
            "session_id": {
              "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
              "list": false,
              "name": "session_id",
              "show": true,
              "type": "str",
              "value": "",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Session ID",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "input_value": {
              "info": "Message to be passed as input.",
              "list": false,
              "name": "input_value",
              "show": true,
              "type": "str",
              "value": "",
              "dynamic": false,
              "advanced": false,
              "required": false,
              "multiline": true,
              "tool_mode": false,
              "copy_field": false,
              "title_case": false,
              "_input_type": "MultilineInput",
              "input_types": [],
              "placeholder": "",
              "display_name": "Input Text",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "sender_name": {
              "info": "Name of the sender.",
              "list": false,
              "name": "sender_name",
              "show": true,
              "type": "str",
              "value": "User",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Sender Name",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "should_store_message": {
              "info": "Store the message in the history.",
              "list": false,
              "name": "should_store_message",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Store Messages",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            }
          },
          "minimized": true,
          "tool_mode": false,
          "description": "Get chat inputs from the Playground.",
          "field_order": [
            "input_value",
            "should_store_message",
            "sender",
            "sender_name",
            "session_id",
            "files",
            "background_color",
            "chat_icon",
            "text_color"
          ],
          "base_classes": [
            "Message"
          ],
          "display_name": "📥 Dados do Processo",
          "output_types": [],
          "custom_fields": {},
          "documentation": "",
          "conditional_paths": [],
          "lf_version": "1.6.5"
        },
        "type": "ChatInput",
        "showNode": false,
        "selected_output": "message"
      },
      "type": "genericNode",
      "dragging": false,
      "measured": {
        "width": 192,
        "height": 48
      },
      "position": {
        "x": 1345.6147446236805,
        "y": 893.4357028938772
      },
      "selected": false
    },
    {
      "id": "Agent-UaCUV",
      "data": {
        "id": "Agent-UaCUV",
        "node": {
          "beta": false,
          "icon": "bot",
          "edited": false,
          "frozen": false,
          "legacy": false,
          "pinned": false,
          "outputs": [
            {
              "types": [
                "Message"
              ],
              "selected": "Message",
              "name": "response",
              "display_name": "Response",
              "method": "message_response",
              "value": "__UNDEFINED__",
              "cache": true,
              "required_inputs": null,
              "allows_loop": false,
              "group_outputs": false,
              "options": null,
              "tool_mode": true
            }
          ],
          "metadata": {},
          "template": {
            "code": {
              "info": "",
              "list": false,
              "name": "code",
              "show": true,
              "type": "code",
              "value": "import json\nimport re\n\nfrom langchain_core.tools import StructuredTool\nfrom pydantic import ValidationError\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import (\n    ToolCallingAgentComponent,\n)\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    IntInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.logging import logger\nfrom langflow.schema.data import Data\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\nfrom langflow.schema.table import EditMode\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    # Filter out json_mode from OpenAI inputs since we handle structured output differently\n    openai_inputs_filtered = [\n        input_field\n        for input_field in MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"]\n        if not (hasattr(input_field, \"name\") and input_field.name == \"json_mode\")\n    ]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            refresh_button=False,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST],\n            external_options={\n                \"fields\": {\n                    \"data\": {\n                        \"node\": {\n                            \"name\": \"connect_other_models\",\n                            \"display_name\": \"Connect other models\",\n                            \"icon\": \"CornerDownLeft\",\n                        }\n                    }\n                },\n            },\n        ),\n        *openai_inputs_filtered,\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        MultilineInput(\n            name=\"format_instructions\",\n            display_name=\"Output Format Instructions\",\n            info=\"Generic Template for structured output formatting. Valid only with Structured response.\",\n            value=(\n                \"You are an AI that extracts structured JSON objects from unstructured text. \"\n                \"Use a predefined schema with expected types (str, int, float, bool, dict). \"\n                \"Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. \"\n                \"Fill missing or ambiguous values with defaults: null for missing values. \"\n                \"Remove exact duplicates but keep variations that have different field values. \"\n                \"Always return valid JSON in the expected format, never throw errors. \"\n                \"If multiple objects can be extracted, return them all in the structured format.\"\n            ),\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=(\n                \"Schema Validation: Define the structure and data types for structured output. \"\n                \"No validation if no output schema.\"\n            ),\n            advanced=True,\n            required=False,\n            value=[],\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"As List\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [\n        Output(name=\"response\", display_name=\"Response\", method=\"message_response\"),\n    ]\n\n    async def get_agent_requirements(self):\n        \"\"\"Get the agent requirements for the agent.\"\"\"\n        llm_model, display_name = await self.get_llm()\n        if llm_model is None:\n            msg = \"No language model selected. Please choose a model to proceed.\"\n            raise ValueError(msg)\n        self.model_name = get_model_name(llm_model, display_name=display_name)\n\n        # Get memory data\n        self.chat_history = await self.get_memory_data()\n        if isinstance(self.chat_history, Message):\n            self.chat_history = [self.chat_history]\n\n        # Add current date tool if enabled\n        if self.add_current_date_tool:\n            if not isinstance(self.tools, list):  # type: ignore[has-type]\n                self.tools = []\n            current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n            if not isinstance(current_date_tool, StructuredTool):\n                msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                raise TypeError(msg)\n            self.tools.append(current_date_tool)\n        return llm_model, self.chat_history, self.tools\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            result = await self.run_agent(agent)\n\n            # Store result for potential JSON output\n            self._agent_result = result\n\n        except (ValueError, TypeError, KeyError) as e:\n            await logger.aerror(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            await logger.aerror(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        # Avoid catching blind Exception; let truly unexpected exceptions propagate\n        except Exception as e:\n            await logger.aerror(f\"Unexpected error: {e!s}\")\n            raise\n        else:\n            return result\n\n    def _preprocess_schema(self, schema):\n        \"\"\"Preprocess schema to ensure correct data types for build_model_from_schema.\"\"\"\n        processed_schema = []\n        for field in schema:\n            processed_field = {\n                \"name\": str(field.get(\"name\", \"field\")),\n                \"type\": str(field.get(\"type\", \"str\")),\n                \"description\": str(field.get(\"description\", \"\")),\n                \"multiple\": field.get(\"multiple\", False),\n            }\n            # Ensure multiple is handled correctly\n            if isinstance(processed_field[\"multiple\"], str):\n                processed_field[\"multiple\"] = processed_field[\"multiple\"].lower() in [\n                    \"true\",\n                    \"1\",\n                    \"t\",\n                    \"y\",\n                    \"yes\",\n                ]\n            processed_schema.append(processed_field)\n        return processed_schema\n\n    async def build_structured_output_base(self, content: str):\n        \"\"\"Build structured output with optional BaseModel validation.\"\"\"\n        json_pattern = r\"\\{.*\\}\"\n        schema_error_msg = \"Try setting an output schema\"\n\n        # Try to parse content as JSON first\n        json_data = None\n        try:\n            json_data = json.loads(content)\n        except json.JSONDecodeError:\n            json_match = re.search(json_pattern, content, re.DOTALL)\n            if json_match:\n                try:\n                    json_data = json.loads(json_match.group())\n                except json.JSONDecodeError:\n                    return {\"content\": content, \"error\": schema_error_msg}\n            else:\n                return {\"content\": content, \"error\": schema_error_msg}\n\n        # If no output schema provided, return parsed JSON without validation\n        if not hasattr(self, \"output_schema\") or not self.output_schema or len(self.output_schema) == 0:\n            return json_data\n\n        # Use BaseModel validation with schema\n        try:\n            processed_schema = self._preprocess_schema(self.output_schema)\n            output_model = build_model_from_schema(processed_schema)\n\n            # Validate against the schema\n            if isinstance(json_data, list):\n                # Multiple objects\n                validated_objects = []\n                for item in json_data:\n                    try:\n                        validated_obj = output_model.model_validate(item)\n                        validated_objects.append(validated_obj.model_dump())\n                    except ValidationError as e:\n                        await logger.aerror(f\"Validation error for item: {e}\")\n                        # Include invalid items with error info\n                        validated_objects.append({\"data\": item, \"validation_error\": str(e)})\n                return validated_objects\n\n            # Single object\n            try:\n                validated_obj = output_model.model_validate(json_data)\n                return [validated_obj.model_dump()]  # Return as list for consistency\n            except ValidationError as e:\n                await logger.aerror(f\"Validation error: {e}\")\n                return [{\"data\": json_data, \"validation_error\": str(e)}]\n\n        except (TypeError, ValueError) as e:\n            await logger.aerror(f\"Error building structured output: {e}\")\n            # Fallback to parsed JSON without validation\n            return json_data\n\n    async def json_response(self) -> Data:\n        \"\"\"Convert agent response to structured JSON Data output with schema validation.\"\"\"\n        # Always use structured chat agent for JSON response mode for better JSON formatting\n        try:\n            system_components = []\n\n            # 1. Agent Instructions (system_prompt)\n            agent_instructions = getattr(self, \"system_prompt\", \"\") or \"\"\n            if agent_instructions:\n                system_components.append(f\"{agent_instructions}\")\n\n            # 2. Format Instructions\n            format_instructions = getattr(self, \"format_instructions\", \"\") or \"\"\n            if format_instructions:\n                system_components.append(f\"Format instructions: {format_instructions}\")\n\n            # 3. Schema Information from BaseModel\n            if hasattr(self, \"output_schema\") and self.output_schema and len(self.output_schema) > 0:\n                try:\n                    processed_schema = self._preprocess_schema(self.output_schema)\n                    output_model = build_model_from_schema(processed_schema)\n                    schema_dict = output_model.model_json_schema()\n                    schema_info = (\n                        \"You are given some text that may include format instructions, \"\n                        \"explanations, or other content alongside a JSON schema.\\n\\n\"\n                        \"Your task:\\n\"\n                        \"- Extract only the JSON schema.\\n\"\n                        \"- Return it as valid JSON.\\n\"\n                        \"- Do not include format instructions, explanations, or extra text.\\n\\n\"\n                        \"Input:\\n\"\n                        f\"{json.dumps(schema_dict, indent=2)}\\n\\n\"\n                        \"Output (only JSON schema):\"\n                    )\n                    system_components.append(schema_info)\n                except (ValidationError, ValueError, TypeError, KeyError) as e:\n                    await logger.aerror(f\"Could not build schema for prompt: {e}\", exc_info=True)\n\n            # Combine all components\n            combined_instructions = \"\\n\\n\".join(system_components) if system_components else \"\"\n            llm_model, self.chat_history, self.tools = await self.get_agent_requirements()\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=combined_instructions,\n            )\n\n            # Create and run structured chat agent\n            try:\n                structured_agent = self.create_agent_runnable()\n            except (NotImplementedError, ValueError, TypeError) as e:\n                await logger.aerror(f\"Error with structured chat agent: {e}\")\n                raise\n            try:\n                result = await self.run_agent(structured_agent)\n            except (\n                ExceptionWithMessageError,\n                ValueError,\n                TypeError,\n                RuntimeError,\n            ) as e:\n                await logger.aerror(f\"Error with structured agent result: {e}\")\n                raise\n            # Extract content from structured agent result\n            if hasattr(result, \"content\"):\n                content = result.content\n            elif hasattr(result, \"text\"):\n                content = result.text\n            else:\n                content = str(result)\n\n        except (\n            ExceptionWithMessageError,\n            ValueError,\n            TypeError,\n            NotImplementedError,\n            AttributeError,\n        ) as e:\n            await logger.aerror(f\"Error with structured chat agent: {e}\")\n            # Fallback to regular agent\n            content_str = \"No content returned from agent\"\n            return Data(data={\"content\": content_str, \"error\": str(e)})\n\n        # Process with structured output validation\n        try:\n            structured_output = await self.build_structured_output_base(content)\n\n            # Handle different output formats\n            if isinstance(structured_output, list) and structured_output:\n                if len(structured_output) == 1:\n                    return Data(data=structured_output[0])\n                return Data(data={\"results\": structured_output})\n            if isinstance(structured_output, dict):\n                return Data(data=structured_output)\n            return Data(data={\"content\": content})\n\n        except (ValueError, TypeError) as e:\n            await logger.aerror(f\"Error in structured output processing: {e}\")\n            return Data(data={\"content\": content, \"error\": str(e)})\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(\n                session_id=self.graph.session_id,\n                order=\"Ascending\",\n                n_messages=self.n_messages,\n            )\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    async def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except (AttributeError, ValueError, TypeError, RuntimeError) as e:\n            await logger.aerror(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            # Filter out json_mode and only use attributes that exist on this component\n            model_kwargs = {}\n            for input_ in inputs:\n                if hasattr(self, f\"{prefix}{input_.name}\"):\n                    model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n                build_config[\"agent_llm\"][\"display_name\"] = \"Model Provider\"\n            elif field_value == \"connect_other_models\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    info=\"The provider of the language model that the agent will use to generate responses.\",\n                    options=[*MODEL_PROVIDERS_LIST],\n                    real_time_refresh=True,\n                    refresh_button=False,\n                    input_types=[\"LanguageModel\"],\n                    placeholder=\"Awaiting model input.\",\n                    options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST],\n                    external_options={\n                        \"fields\": {\n                            \"data\": {\n                                \"node\": {\n                                    \"name\": \"connect_other_models\",\n                                    \"display_name\": \"Connect other models\",\n                                    \"icon\": \"CornerDownLeft\",\n                                },\n                            }\n                        },\n                    },\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\",\n            tool_description=description,\n            callbacks=self.get_langchain_callbacks(),\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
              "dynamic": true,
              "advanced": true,
              "password": false,
              "required": true,
              "fileTypes": [],
              "file_path": "",
              "multiline": true,
              "title_case": false,
              "placeholder": "",
              "load_from_db": false,
              "input_types": []
            },
            "_type": "Component",
            "tools": {
              "info": "These are the tools that the agent can use to help with tasks.",
              "list": true,
              "name": "tools",
              "show": true,
              "type": "other",
              "value": "",
              "dynamic": false,
              "advanced": false,
              "required": false,
              "title_case": false,
              "_input_type": "HandleInput",
              "input_types": [
                "Tool"
              ],
              "placeholder": "",
              "display_name": "Tools",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "verbose": {
              "info": "",
              "list": false,
              "name": "verbose",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Verbose",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            },
            "agent_llm": {
              "tool_mode": false,
              "trace_as_metadata": true,
              "options": [
                "Anthropic",
                "Google Generative AI",
                "OpenAI"
              ],
              "options_metadata": [
                {
                  "icon": "Anthropic"
                },
                {
                  "icon": "GoogleGenerativeAI"
                },
                {
                  "icon": "OpenAI"
                }
              ],
              "combobox": false,
              "dialog_inputs": {},
              "toggle": false,
              "required": false,
              "placeholder": "Awaiting model input.",
              "show": true,
              "name": "agent_llm",
              "value": "",
              "display_name": "Language Model",
              "advanced": false,
              "input_types": [
                "LanguageModel"
              ],
              "dynamic": false,
              "info": "The provider of the language model that the agent will use to generate responses.",
              "real_time_refresh": true,
              "refresh_button": false,
              "title_case": false,
              "external_options": {
                "fields": {
                  "data": {
                    "node": {
                      "name": "connect_other_models",
                      "display_name": "Connect other models",
                      "icon": "CornerDownLeft"
                    }
                  }
                }
              },
              "type": "str",
              "_input_type": "DropdownInput"
            },
            "n_messages": {
              "info": "Number of chat history messages to retrieve.",
              "list": false,
              "name": "n_messages",
              "show": true,
              "type": "int",
              "value": 100,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "IntInput",
              "placeholder": "",
              "display_name": "Number of Chat History Messages",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            },
            "input_value": {
              "info": "The input provided by the user for the agent to process.",
              "list": false,
              "name": "input_value",
              "show": true,
              "type": "str",
              "value": "",
              "dynamic": false,
              "advanced": false,
              "required": false,
              "tool_mode": true,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Input",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "output_schema": {
              "info": "Schema Validation: Define the structure and data types for structured output. No validation if no output schema.",
              "name": "output_schema",
              "show": true,
              "type": "table",
              "value": [],
              "dynamic": false,
              "is_list": true,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "table_icon": "Table",
              "title_case": false,
              "_input_type": "TableInput",
              "placeholder": "",
              "display_name": "Output Schema",
              "table_schema": {
                "columns": [
                  {
                    "name": "name",
                    "type": "str",
                    "hidden": false,
                    "default": "field",
                    "sortable": true,
                    "edit_mode": "inline",
                    "formatter": "text",
                    "filterable": true,
                    "description": "Specify the name of the output field.",
                    "disable_edit": false,
                    "display_name": "Name"
                  },
                  {
                    "name": "description",
                    "type": "str",
                    "hidden": false,
                    "default": "description of field",
                    "sortable": true,
                    "edit_mode": "popover",
                    "formatter": "text",
                    "filterable": true,
                    "description": "Describe the purpose of the output field.",
                    "disable_edit": false,
                    "display_name": "Description"
                  },
                  {
                    "name": "type",
                    "type": "str",
                    "hidden": false,
                    "default": "str",
                    "options": [
                      "str",
                      "int",
                      "float",
                      "bool",
                      "dict"
                    ],
                    "sortable": true,
                    "edit_mode": "inline",
                    "formatter": "text",
                    "filterable": true,
                    "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                    "disable_edit": false,
                    "display_name": "Type"
                  },
                  {
                    "name": "multiple",
                    "type": "boolean",
                    "hidden": false,
                    "default": false,
                    "sortable": true,
                    "edit_mode": "inline",
                    "formatter": "boolean",
                    "filterable": true,
                    "description": "Set to True if this output field should be a list of the specified type.",
                    "disable_edit": false,
                    "display_name": "As List"
                  }
                ]
              },
              "trigger_icon": "Table",
              "trigger_text": "Open table",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            },
            "system_prompt": {
              "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
              "list": false,
              "name": "system_prompt",
              "show": true,
              "type": "str",
              "value": "Você é um analista jurídico especializado em análise de processos para compra de créditos.\n\nAvalie o processo conforme as POLÍTICAS DE NEGÓCIO:\n\n**Regra-base (elegibilidade)**\nPOL-1: Só compramos crédito de processos transitados em julgado e em fase de execução (OBRIGATÓRIO)\nPOL-2: Exigir valor de condenação informado (OBRIGATÓRIO)\n\n**Quando NÃO compramos o crédito**\nPOL-3: Valor de condenação < R$ 1.000,00 → REJEITAR\nPOL-4: Condenações na esfera trabalhista → REJEITAR\nPOL-5: Óbito do autor sem habilitação no inventário → REJEITAR\nPOL-6: Substabelecimento sem reserva de poderes → REJEITAR\n\n**Honorários**\nPOL-7: Informar honorários contratuais, periciais e sucumbenciais quando existirem (OBRIGATÓRIO)\n\n**Qualidade**\nPOL-8: Se faltar documento essencial → INCOMPLETO\n\n**DECISÕES:**\n- \"approved\": Processo aprovado\n- \"rejected\": Processo rejeitado\n- \"incomplete\": Documentação incompleta\n\n**INSTRUÇÕES:**\n1. Analise TODOS os documentos\n2. Verifique TODAS as políticas POL-1 a POL-8\n3. Cite TODAS as políticas relevantes\n4. Seja claro e objetivo\n\nRetorne APENAS JSON:\n{{\n  \"decision\": \"approved|rejected|incomplete\",\n  \"rationale\": \"Justificativa citando políticas\",\n  \"citacoes\": [\"POL-X\", ...]\n}}",
              "dynamic": false,
              "advanced": false,
              "required": false,
              "multiline": true,
              "tool_mode": false,
              "copy_field": false,
              "title_case": false,
              "_input_type": "MultilineInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Agent Instructions",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "max_iterations": {
              "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
              "list": false,
              "name": "max_iterations",
              "show": true,
              "type": "int",
              "value": 15,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "IntInput",
              "placeholder": "",
              "display_name": "Max Iterations",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            },
            "agent_description": {
              "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
              "list": false,
              "name": "agent_description",
              "show": true,
              "type": "str",
              "value": "A helpful assistant with access to the following tools:",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "multiline": true,
              "tool_mode": false,
              "copy_field": false,
              "title_case": false,
              "_input_type": "MultilineInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Agent Description [Deprecated]",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "format_instructions": {
              "info": "Generic Template for structured output formatting. Valid only with Structured response.",
              "list": false,
              "name": "format_instructions",
              "show": true,
              "type": "str",
              "value": "You are an AI that extracts structured JSON objects from unstructured text. Use a predefined schema with expected types (str, int, float, bool, dict). Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. Fill missing or ambiguous values with defaults: null for missing values. Remove exact duplicates but keep variations that have different field values. Always return valid JSON in the expected format, never throw errors. If multiple objects can be extracted, return them all in the structured format.",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "multiline": true,
              "tool_mode": false,
              "copy_field": false,
              "title_case": false,
              "_input_type": "MultilineInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Output Format Instructions",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "add_current_date_tool": {
              "info": "If true, will add a tool to the agent that returns the current date.",
              "list": false,
              "name": "add_current_date_tool",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Current Date",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            },
            "handle_parsing_errors": {
              "info": "Should the Agent fix errors when reading user input for better processing?",
              "list": false,
              "name": "handle_parsing_errors",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Handle Parse Errors",
              "list_add_label": "Add More",
              "trace_as_metadata": true,
              "input_types": []
            }
          },
          "minimized": false,
          "tool_mode": false,
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "field_order": [
            "agent_llm",
            "max_tokens",
            "model_kwargs",
            "json_mode",
            "model_name",
            "openai_api_base",
            "api_key",
            "temperature",
            "seed",
            "max_retries",
            "timeout",
            "system_prompt",
            "n_messages",
            "tools",
            "input_value",
            "handle_parsing_errors",
            "verbose",
            "max_iterations",
            "agent_description",
            "add_current_date_tool"
          ],
          "base_classes": [
            "Message"
          ],
          "display_name": "Agent",
          "last_updated": "2025-10-31T14:26:41.644Z",
          "output_types": [],
          "custom_fields": {},
          "documentation": "",
          "conditional_paths": [],
          "lf_version": "1.6.5"
        },
        "type": "Agent",
        "showNode": true,
        "selected_output": "response"
      },
      "type": "genericNode",
      "dragging": false,
      "measured": {
        "width": 320,
        "height": 429
      },
      "position": {
        "x": 1653.6215120745082,
        "y": 274.10896478053894
      },
      "selected": false
    },
    {
      "id": "URLComponent-RtzkE",
      "data": {
        "id": "URLComponent-RtzkE",
        "node": {
          "key": "URLComponent",
          "beta": false,
          "icon": "layout-template",
          "score": 2.220446049250313e-16,
          "edited": false,
          "frozen": false,
          "legacy": false,
          "pinned": false,
          "outputs": [
            {
              "types": [
                "Tool"
              ],
              "selected": "Tool",
              "name": "component_as_tool",
              "hidden": null,
              "display_name": "Toolset",
              "method": "to_toolkit",
              "value": "__UNDEFINED__",
              "cache": true,
              "required_inputs": null,
              "allows_loop": false,
              "group_outputs": false,
              "options": null,
              "tool_mode": true
            }
          ],
          "category": "data",
          "metadata": {},
          "template": {
            "code": {
              "info": "",
              "list": false,
              "name": "code",
              "show": true,
              "type": "code",
              "value": "import re\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom langchain_community.document_loaders import RecursiveUrlLoader\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.helpers.data import safe_convert\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SliderInput, TableInput\nfrom langflow.logging.logger import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.deps import get_settings_service\n\n# Constants\nDEFAULT_TIMEOUT = 30\nDEFAULT_MAX_DEPTH = 1\nDEFAULT_FORMAT = \"Text\"\nURL_REGEX = re.compile(\n    r\"^(https?:\\/\\/)?\" r\"(www\\.)?\" r\"([a-zA-Z0-9.-]+)\" r\"(\\.[a-zA-Z]{2,})?\" r\"(:\\d+)?\" r\"(\\/[^\\s]*)?$\",\n    re.IGNORECASE,\n)\n\n\nclass URLComponent(Component):\n    \"\"\"A component that loads and parses content from web pages recursively.\n\n    This component allows fetching content from one or more URLs, with options to:\n    - Control crawl depth\n    - Prevent crawling outside the root domain\n    - Use async loading for better performance\n    - Extract either raw HTML or clean text\n    - Configure request headers and timeouts\n    \"\"\"\n\n    display_name = \"URL\"\n    description = \"Fetch content from one or more web pages, following links recursively.\"\n    documentation: str = \"https://docs.langflow.org/components-data#url\"\n    icon = \"layout-template\"\n    name = \"URLComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs to crawl recursively, by clicking the '+' button.\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n            input_types=[],\n        ),\n        SliderInput(\n            name=\"max_depth\",\n            display_name=\"Depth\",\n            info=(\n                \"Controls how many 'clicks' away from the initial page the crawler will go:\\n\"\n                \"- depth 1: only the initial page\\n\"\n                \"- depth 2: initial page + all pages linked directly from it\\n\"\n                \"- depth 3: initial page + direct links + links found on those direct link pages\\n\"\n                \"Note: This is about link traversal, not URL path depth.\"\n            ),\n            value=DEFAULT_MAX_DEPTH,\n            range_spec=RangeSpec(min=1, max=5, step=1),\n            required=False,\n            min_label=\" \",\n            max_label=\" \",\n            min_label_icon=\"None\",\n            max_label_icon=\"None\",\n            # slider_input=True\n        ),\n        BoolInput(\n            name=\"prevent_outside\",\n            display_name=\"Prevent Outside\",\n            info=(\n                \"If enabled, only crawls URLs within the same domain as the root URL. \"\n                \"This helps prevent the crawler from going to external websites.\"\n            ),\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"use_async\",\n            display_name=\"Use Async\",\n            info=(\n                \"If enabled, uses asynchronous loading which can be significantly faster \"\n                \"but might use more system resources.\"\n            ),\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'HTML' for the raw HTML content.\",\n            options=[\"Text\", \"HTML\"],\n            value=DEFAULT_FORMAT,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request in seconds.\",\n            value=DEFAULT_TIMEOUT,\n            required=False,\n            advanced=True,\n        ),\n        TableInput(\n            name=\"headers\",\n            display_name=\"Headers\",\n            info=\"The headers to send with the request\",\n            table_schema=[\n                {\n                    \"name\": \"key\",\n                    \"display_name\": \"Header\",\n                    \"type\": \"str\",\n                    \"description\": \"Header name\",\n                },\n                {\n                    \"name\": \"value\",\n                    \"display_name\": \"Value\",\n                    \"type\": \"str\",\n                    \"description\": \"Header value\",\n                },\n            ],\n            value=[{\"key\": \"User-Agent\", \"value\": get_settings_service().settings.user_agent}],\n            advanced=True,\n            input_types=[\"DataFrame\"],\n        ),\n        BoolInput(\n            name=\"filter_text_html\",\n            display_name=\"Filter Text/HTML\",\n            info=\"If enabled, filters out text/css content type from the results.\",\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"continue_on_failure\",\n            display_name=\"Continue on Failure\",\n            info=\"If enabled, continues crawling even if some requests fail.\",\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"check_response_status\",\n            display_name=\"Check Response Status\",\n            info=\"If enabled, checks the response status of the request.\",\n            value=False,\n            required=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"autoset_encoding\",\n            display_name=\"Autoset Encoding\",\n            info=\"If enabled, automatically sets the encoding of the request.\",\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Extracted Pages\", name=\"page_results\", method=\"fetch_content\"),\n        Output(display_name=\"Raw Content\", name=\"raw_results\", method=\"fetch_content_as_message\", tool_mode=False),\n    ]\n\n    @staticmethod\n    def validate_url(url: str) -> bool:\n        \"\"\"Validates if the given string matches URL pattern.\n\n        Args:\n            url: The URL string to validate\n\n        Returns:\n            bool: True if the URL is valid, False otherwise\n        \"\"\"\n        return bool(URL_REGEX.match(url))\n\n    def ensure_url(self, url: str) -> str:\n        \"\"\"Ensures the given string is a valid URL.\n\n        Args:\n            url: The URL string to validate and normalize\n\n        Returns:\n            str: The normalized URL\n\n        Raises:\n            ValueError: If the URL is invalid\n        \"\"\"\n        url = url.strip()\n        if not url.startswith((\"http://\", \"https://\")):\n            url = \"https://\" + url\n\n        if not self.validate_url(url):\n            msg = f\"Invalid URL: {url}\"\n            raise ValueError(msg)\n\n        return url\n\n    def _create_loader(self, url: str) -> RecursiveUrlLoader:\n        \"\"\"Creates a RecursiveUrlLoader instance with the configured settings.\n\n        Args:\n            url: The URL to load\n\n        Returns:\n            RecursiveUrlLoader: Configured loader instance\n        \"\"\"\n        headers_dict = {header[\"key\"]: header[\"value\"] for header in self.headers if header[\"value\"] is not None}\n        extractor = (lambda x: x) if self.format == \"HTML\" else (lambda x: BeautifulSoup(x, \"lxml\").get_text())\n\n        return RecursiveUrlLoader(\n            url=url,\n            max_depth=self.max_depth,\n            prevent_outside=self.prevent_outside,\n            use_async=self.use_async,\n            extractor=extractor,\n            timeout=self.timeout,\n            headers=headers_dict,\n            check_response_status=self.check_response_status,\n            continue_on_failure=self.continue_on_failure,\n            base_url=url,  # Add base_url to ensure consistent domain crawling\n            autoset_encoding=self.autoset_encoding,  # Enable automatic encoding detection\n            exclude_dirs=[],  # Allow customization of excluded directories\n            link_regex=None,  # Allow customization of link filtering\n        )\n\n    def fetch_url_contents(self) -> list[dict]:\n        \"\"\"Load documents from the configured URLs.\n\n        Returns:\n            List[Data]: List of Data objects containing the fetched content\n\n        Raises:\n            ValueError: If no valid URLs are provided or if there's an error loading documents\n        \"\"\"\n        try:\n            urls = list({self.ensure_url(url) for url in self.urls if url.strip()})\n            logger.debug(f\"URLs: {urls}\")\n            if not urls:\n                msg = \"No valid URLs provided.\"\n                raise ValueError(msg)\n\n            all_docs = []\n            for url in urls:\n                logger.debug(f\"Loading documents from {url}\")\n\n                try:\n                    loader = self._create_loader(url)\n                    docs = loader.load()\n\n                    if not docs:\n                        logger.warning(f\"No documents found for {url}\")\n                        continue\n\n                    logger.debug(f\"Found {len(docs)} documents from {url}\")\n                    all_docs.extend(docs)\n\n                except requests.exceptions.RequestException as e:\n                    logger.exception(f\"Error loading documents from {url}: {e}\")\n                    continue\n\n            if not all_docs:\n                msg = \"No documents were successfully loaded from any URL\"\n                raise ValueError(msg)\n\n            # data = [Data(text=doc.page_content, **doc.metadata) for doc in all_docs]\n            data = [\n                {\n                    \"text\": safe_convert(doc.page_content, clean_data=True),\n                    \"url\": doc.metadata.get(\"source\", \"\"),\n                    \"title\": doc.metadata.get(\"title\", \"\"),\n                    \"description\": doc.metadata.get(\"description\", \"\"),\n                    \"content_type\": doc.metadata.get(\"content_type\", \"\"),\n                    \"language\": doc.metadata.get(\"language\", \"\"),\n                }\n                for doc in all_docs\n            ]\n        except Exception as e:\n            error_msg = e.message if hasattr(e, \"message\") else e\n            msg = f\"Error loading documents: {error_msg!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        return data\n\n    def fetch_content(self) -> DataFrame:\n        \"\"\"Convert the documents to a DataFrame.\"\"\"\n        return DataFrame(data=self.fetch_url_contents())\n\n    def fetch_content_as_message(self) -> Message:\n        \"\"\"Convert the documents to a Message.\"\"\"\n        url_contents = self.fetch_url_contents()\n        return Message(text=\"\\n\\n\".join([x[\"text\"] for x in url_contents]), data={\"data\": url_contents})\n",
              "dynamic": true,
              "advanced": true,
              "password": false,
              "required": true,
              "fileTypes": [],
              "file_path": "",
              "multiline": true,
              "title_case": false,
              "placeholder": "",
              "load_from_db": false
            },
            "urls": {
              "info": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
              "list": true,
              "name": "urls",
              "show": true,
              "type": "str",
              "value": "",
              "dynamic": false,
              "advanced": false,
              "required": false,
              "tool_mode": true,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [],
              "placeholder": "Enter a URL...",
              "display_name": "URLs",
              "load_from_db": false,
              "list_add_label": "Add URL",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "_type": "Component",
            "format": {
              "info": "Output Format. Use 'Text' to extract the text from the HTML or 'HTML' for the raw HTML content.",
              "name": "format",
              "show": true,
              "type": "str",
              "value": "Text",
              "toggle": false,
              "dynamic": false,
              "options": [
                "Text",
                "HTML"
              ],
              "advanced": true,
              "combobox": false,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "DropdownInput",
              "placeholder": "",
              "display_name": "Output Format",
              "dialog_inputs": {},
              "options_metadata": [],
              "trace_as_metadata": true
            },
            "headers": {
              "info": "The headers to send with the request",
              "name": "headers",
              "show": true,
              "type": "table",
              "value": [
                {
                  "key": "User-Agent",
                  "value": "langflow"
                }
              ],
              "dynamic": false,
              "is_list": true,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "table_icon": "Table",
              "title_case": false,
              "_input_type": "TableInput",
              "input_types": [
                "DataFrame"
              ],
              "placeholder": "",
              "display_name": "Headers",
              "table_schema": {
                "columns": [
                  {
                    "name": "key",
                    "type": "str",
                    "hidden": false,
                    "default": "None",
                    "sortable": true,
                    "edit_mode": "popover",
                    "formatter": "text",
                    "filterable": true,
                    "description": "Header name",
                    "disable_edit": false,
                    "display_name": "Header"
                  },
                  {
                    "name": "value",
                    "type": "str",
                    "hidden": false,
                    "default": "None",
                    "sortable": true,
                    "edit_mode": "popover",
                    "formatter": "text",
                    "filterable": true,
                    "description": "Header value",
                    "disable_edit": false,
                    "display_name": "Value"
                  }
                ]
              },
              "trigger_icon": "Table",
              "trigger_text": "Open table",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "timeout": {
              "info": "Timeout for the request in seconds.",
              "list": false,
              "name": "timeout",
              "show": true,
              "type": "int",
              "value": 30,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "IntInput",
              "placeholder": "",
              "display_name": "Timeout",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "max_depth": {
              "info": "Controls how many 'clicks' away from the initial page the crawler will go:\n- depth 1: only the initial page\n- depth 2: initial page + all pages linked directly from it\n- depth 3: initial page + direct links + links found on those direct link pages\nNote: This is about link traversal, not URL path depth.",
              "name": "max_depth",
              "show": true,
              "type": "slider",
              "value": 1,
              "dynamic": false,
              "advanced": false,
              "required": false,
              "max_label": " ",
              "min_label": " ",
              "tool_mode": false,
              "range_spec": {
                "max": 5,
                "min": 1,
                "step": 1,
                "step_type": "float"
              },
              "title_case": false,
              "_input_type": "SliderInput",
              "placeholder": "",
              "display_name": "Depth",
              "slider_input": false,
              "max_label_icon": "None",
              "min_label_icon": "None",
              "slider_buttons": false,
              "slider_buttons_options": []
            },
            "use_async": {
              "info": "If enabled, uses asynchronous loading which can be significantly faster but might use more system resources.",
              "list": false,
              "name": "use_async",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Use Async",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "tools_metadata": {
              "tool_mode": false,
              "trace_as_metadata": true,
              "is_list": true,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "tools_metadata",
              "value": [
                {
                  "args": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Urls",
                      "default": "",
                      "description": "Enter one or more URLs to crawl recursively, by clicking the '+' button."
                    }
                  },
                  "name": "fetch_content",
                  "tags": [
                    "fetch_content"
                  ],
                  "status": true,
                  "readonly": false,
                  "description": "Fetch content from one or more web pages, following links recursively.",
                  "display_name": "fetch_content",
                  "display_description": "Fetch content from one or more web pages, following links recursively."
                }
              ],
              "display_name": "Actions",
              "advanced": false,
              "dynamic": false,
              "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
              "real_time_refresh": true,
              "title_case": false,
              "type": "tools",
              "_input_type": "ToolsInput"
            },
            "prevent_outside": {
              "info": "If enabled, only crawls URLs within the same domain as the root URL. This helps prevent the crawler from going to external websites.",
              "list": false,
              "name": "prevent_outside",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Prevent Outside",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "autoset_encoding": {
              "info": "If enabled, automatically sets the encoding of the request.",
              "list": false,
              "name": "autoset_encoding",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Autoset Encoding",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "filter_text_html": {
              "info": "If enabled, filters out text/css content type from the results.",
              "list": false,
              "name": "filter_text_html",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Filter Text/HTML",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "continue_on_failure": {
              "info": "If enabled, continues crawling even if some requests fail.",
              "list": false,
              "name": "continue_on_failure",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Continue on Failure",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "check_response_status": {
              "info": "If enabled, checks the response status of the request.",
              "list": false,
              "name": "check_response_status",
              "show": true,
              "type": "bool",
              "value": false,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Check Response Status",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            }
          },
          "minimized": false,
          "tool_mode": true,
          "description": "Fetch content from one or more web pages, following links recursively.",
          "field_order": [
            "urls",
            "max_depth",
            "prevent_outside",
            "use_async",
            "format",
            "timeout",
            "headers",
            "filter_text_html",
            "continue_on_failure",
            "check_response_status",
            "autoset_encoding"
          ],
          "base_classes": [
            "DataFrame",
            "Message"
          ],
          "display_name": "URL",
          "last_updated": "2025-10-31T14:26:41.391Z",
          "output_types": [],
          "custom_fields": {},
          "documentation": "",
          "conditional_paths": [],
          "lf_version": "1.6.5"
        },
        "type": "URLComponent",
        "showNode": true
      },
      "type": "genericNode",
      "dragging": false,
      "measured": {
        "width": 320,
        "height": 290
      },
      "position": {
        "x": 1298.4947836536423,
        "y": -65.71515234715191
      },
      "selected": false
    },
    {
      "id": "ChatOutput-lubPZ",
      "data": {
        "id": "ChatOutput-lubPZ",
        "node": {
          "key": "ChatOutput",
          "beta": false,
          "icon": "MessagesSquare",
          "score": 0.003169567463043492,
          "edited": false,
          "frozen": false,
          "legacy": false,
          "pinned": false,
          "outputs": [
            {
              "name": "message",
              "cache": true,
              "types": [
                "Message"
              ],
              "value": "__UNDEFINED__",
              "method": "message_response",
              "selected": "Message",
              "tool_mode": true,
              "allows_loop": false,
              "display_name": "Output Message",
              "group_outputs": false
            }
          ],
          "category": "outputs",
          "metadata": {},
          "template": {
            "code": {
              "info": "",
              "list": false,
              "name": "code",
              "show": true,
              "type": "code",
              "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, _icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n",
              "dynamic": true,
              "advanced": true,
              "password": false,
              "required": true,
              "fileTypes": [],
              "file_path": "",
              "multiline": true,
              "title_case": false,
              "placeholder": "",
              "load_from_db": false
            },
            "_type": "Component",
            "sender": {
              "info": "Type of sender.",
              "name": "sender",
              "show": true,
              "type": "str",
              "value": "Machine",
              "dynamic": false,
              "options": [
                "Machine",
                "User"
              ],
              "advanced": true,
              "combobox": false,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "DropdownInput",
              "placeholder": "",
              "display_name": "Sender Type",
              "dialog_inputs": {},
              "options_metadata": [],
              "trace_as_metadata": true
            },
            "session_id": {
              "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
              "list": false,
              "name": "session_id",
              "show": true,
              "type": "str",
              "value": "",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Session ID",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "input_value": {
              "info": "Message to be passed as output.",
              "list": false,
              "name": "input_value",
              "show": true,
              "type": "other",
              "value": "",
              "dynamic": false,
              "advanced": false,
              "required": true,
              "title_case": false,
              "_input_type": "HandleInput",
              "input_types": [
                "Data",
                "DataFrame",
                "Message"
              ],
              "placeholder": "",
              "display_name": "Inputs",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            },
            "sender_name": {
              "info": "Name of the sender.",
              "list": false,
              "name": "sender_name",
              "show": true,
              "type": "str",
              "value": "AI",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Sender Name",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "data_template": {
              "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
              "list": false,
              "name": "data_template",
              "show": true,
              "type": "str",
              "value": "{text}",
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "MessageTextInput",
              "input_types": [
                "Message"
              ],
              "placeholder": "",
              "display_name": "Data Template",
              "load_from_db": false,
              "list_add_label": "Add More",
              "trace_as_input": true,
              "trace_as_metadata": true
            },
            "should_store_message": {
              "info": "Store the message in the history.",
              "list": false,
              "name": "should_store_message",
              "show": true,
              "type": "bool",
              "value": true,
              "dynamic": false,
              "advanced": true,
              "required": false,
              "tool_mode": false,
              "title_case": false,
              "_input_type": "BoolInput",
              "placeholder": "",
              "display_name": "Store Messages",
              "list_add_label": "Add More",
              "trace_as_metadata": true
            }
          },
          "minimized": true,
          "tool_mode": false,
          "description": "Display a chat message in the Playground.",
          "field_order": [
            "input_value",
            "should_store_message",
            "sender",
            "sender_name",
            "session_id",
            "data_template",
            "background_color",
            "chat_icon",
            "text_color",
            "clean_data"
          ],
          "base_classes": [
            "Message"
          ],
          "display_name": "Chat Output",
          "output_types": [],
          "custom_fields": {},
          "documentation": "",
          "conditional_paths": [],
          "lf_version": "1.6.5"
        },
        "type": "ChatOutput",
        "showNode": false
      },
      "type": "genericNode",
      "dragging": false,
      "measured": {
        "width": 192,
        "height": 48
      },
      "position": {
        "x": 2110.415543467874,
        "y": 342.87064877614426
      },
      "selected": false
    },
    {
      "id": "AmazonBedrockModel-Ov0p3",
      "type": "genericNode",
      "position": {
        "x": 904.5148413975253,
        "y": -25.59151182881388
      },
      "data": {
        "node": {
          "template": {
            "_type": "Component",
            "aws_access_key_id": {
              "load_from_db": true,
              "required": true,
              "placeholder": "",
              "show": true,
              "name": "aws_access_key_id",
              "value": "AWS_ACCESS_KEY_ID",
              "display_name": "AWS Access Key ID",
              "advanced": false,
              "input_types": [],
              "dynamic": false,
              "info": "The access key for your AWS account.Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.",
              "title_case": false,
              "password": true,
              "type": "str",
              "_input_type": "SecretStrInput"
            },
            "aws_secret_access_key": {
              "load_from_db": true,
              "required": true,
              "placeholder": "",
              "show": true,
              "name": "aws_secret_access_key",
              "value": "AWS_SECRET_ACCESS_KEY",
              "display_name": "AWS Secret Access Key",
              "advanced": false,
              "input_types": [],
              "dynamic": false,
              "info": "The secret key for your AWS account. Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.",
              "title_case": false,
              "password": true,
              "type": "str",
              "_input_type": "SecretStrInput"
            },
            "aws_session_token": {
              "load_from_db": false,
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "aws_session_token",
              "value": "",
              "display_name": "AWS Session Token",
              "advanced": false,
              "input_types": [],
              "dynamic": false,
              "info": "The session key for your AWS account. Only needed for temporary credentials. Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.",
              "title_case": false,
              "password": true,
              "type": "str",
              "_input_type": "SecretStrInput"
            },
            "code": {
              "type": "code",
              "required": true,
              "placeholder": "",
              "list": false,
              "show": true,
              "multiline": true,
              "value": "from langflow.base.models.aws_constants import AWS_REGIONS, AWS_MODEL_IDs\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import MessageTextInput, SecretStrInput\nfrom langflow.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=AWS_MODEL_IDs,\n            value=\"anthropic.claude-3-haiku-20240307-v1:0\",\n            info=\"List of available model IDs to choose from.\",\n        ),\n        SecretStrInput(\n            name=\"aws_access_key_id\",\n            display_name=\"AWS Access Key ID\",\n            info=\"The access key for your AWS account.\"\n            \"Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.\",\n            value=\"AWS_ACCESS_KEY_ID\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_secret_access_key\",\n            display_name=\"AWS Secret Access Key\",\n            info=\"The secret key for your AWS account. \"\n            \"Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.\",\n            value=\"AWS_SECRET_ACCESS_KEY\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_session_token\",\n            display_name=\"AWS Session Token\",\n            advanced=False,\n            info=\"The session key for your AWS account. \"\n            \"Only needed for temporary credentials. \"\n            \"Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.\",\n            load_from_db=False,\n        ),\n        SecretStrInput(\n            name=\"credentials_profile_name\",\n            display_name=\"Credentials Profile Name\",\n            advanced=True,\n            info=\"The name of the profile to use from your \"\n            \"~/.aws/credentials file. \"\n            \"If not provided, the default profile will be used.\",\n            load_from_db=False,\n        ),\n        DropdownInput(\n            name=\"region_name\",\n            display_name=\"Region Name\",\n            value=\"us-east-1\",\n            options=AWS_REGIONS,\n            info=\"The AWS region where your Bedrock resources are located.\",\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            is_list=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        MessageTextInput(\n            name=\"endpoint_url\",\n            display_name=\"Endpoint URL\",\n            advanced=True,\n            info=\"The URL of the Bedrock endpoint to use.\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        try:\n            import boto3\n        except ImportError as e:\n            msg = \"boto3 is not installed. Please install it with `pip install boto3`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key_id or self.aws_secret_access_key:\n            try:\n                session = boto3.Session(\n                    aws_access_key_id=self.aws_access_key_id,\n                    aws_secret_access_key=self.aws_secret_access_key,\n                    aws_session_token=self.aws_session_token,\n                )\n            except Exception as e:\n                msg = \"Could not create a boto3 session.\"\n                raise ValueError(msg) from e\n        elif self.credentials_profile_name:\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to AmazonBedrock API.\"\n            raise ValueError(msg) from e\n        return output\n",
              "fileTypes": [],
              "file_path": "",
              "password": false,
              "name": "code",
              "advanced": true,
              "dynamic": true,
              "info": "",
              "load_from_db": false,
              "title_case": false
            },
            "credentials_profile_name": {
              "load_from_db": false,
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "credentials_profile_name",
              "value": "",
              "display_name": "Credentials Profile Name",
              "advanced": true,
              "input_types": [],
              "dynamic": false,
              "info": "The name of the profile to use from your ~/.aws/credentials file. If not provided, the default profile will be used.",
              "title_case": false,
              "password": true,
              "type": "str",
              "_input_type": "SecretStrInput"
            },
            "endpoint_url": {
              "tool_mode": false,
              "trace_as_input": true,
              "trace_as_metadata": true,
              "load_from_db": false,
              "list": false,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "endpoint_url",
              "value": "",
              "display_name": "Endpoint URL",
              "advanced": true,
              "input_types": [
                "Message"
              ],
              "dynamic": false,
              "info": "The URL of the Bedrock endpoint to use.",
              "title_case": false,
              "type": "str",
              "_input_type": "MessageTextInput"
            },
            "input_value": {
              "trace_as_input": true,
              "tool_mode": false,
              "trace_as_metadata": true,
              "load_from_db": false,
              "list": false,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "input_value",
              "value": "Teste de conexão",
              "display_name": "Input",
              "advanced": false,
              "input_types": [
                "Message"
              ],
              "dynamic": false,
              "info": "",
              "title_case": false,
              "type": "str",
              "_input_type": "MessageInput"
            },
            "model_id": {
              "tool_mode": false,
              "trace_as_metadata": true,
              "options": [
                "amazon.titan-text-express-v1",
                "amazon.titan-text-lite-v1",
                "amazon.titan-text-premier-v1:0",
                "anthropic.claude-v2",
                "anthropic.claude-v2:1",
                "anthropic.claude-3-sonnet-20240229-v1:0",
                "anthropic.claude-3-5-sonnet-20240620-v1:0",
                "anthropic.claude-3-5-sonnet-20241022-v2:0",
                "anthropic.claude-3-haiku-20240307-v1:0",
                "anthropic.claude-3-5-haiku-20241022-v1:0",
                "anthropic.claude-3-opus-20240229-v1:0",
                "anthropic.claude-instant-v1",
                "ai21.jamba-instruct-v1:0",
                "ai21.j2-mid-v1",
                "ai21.j2-ultra-v1",
                "ai21.jamba-1-5-large-v1:0",
                "ai21.jamba-1-5-mini-v1:0",
                "cohere.command-text-v14",
                "cohere.command-light-text-v14",
                "cohere.command-r-v1:0",
                "cohere.command-r-plus-v1:0",
                "meta.llama2-13b-chat-v1",
                "meta.llama2-70b-chat-v1",
                "meta.llama3-8b-instruct-v1:0",
                "meta.llama3-70b-instruct-v1:0",
                "meta.llama3-1-8b-instruct-v1:0",
                "meta.llama3-1-70b-instruct-v1:0",
                "meta.llama3-1-405b-instruct-v1:0",
                "meta.llama3-2-1b-instruct-v1:0",
                "meta.llama3-2-3b-instruct-v1:0",
                "meta.llama3-2-11b-instruct-v1:0",
                "meta.llama3-2-90b-instruct-v1:0",
                "mistral.mistral-7b-instruct-v0:2",
                "mistral.mixtral-8x7b-instruct-v0:1",
                "mistral.mistral-large-2402-v1:0",
                "mistral.mistral-large-2407-v1:0",
                "mistral.mistral-small-2402-v1:0"
              ],
              "options_metadata": [],
              "combobox": false,
              "dialog_inputs": {},
              "toggle": false,
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "model_id",
              "value": "anthropic.claude-3-5-sonnet-20240620-v1:0",
              "display_name": "Model ID",
              "advanced": false,
              "dynamic": false,
              "info": "List of available model IDs to choose from.",
              "title_case": false,
              "external_options": {},
              "type": "str",
              "_input_type": "DropdownInput"
            },
            "model_kwargs": {
              "tool_mode": false,
              "trace_as_input": true,
              "list": true,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "model_kwargs",
              "value": {},
              "display_name": "Model Kwargs",
              "advanced": true,
              "dynamic": false,
              "info": "Additional keyword arguments to pass to the model.",
              "title_case": false,
              "type": "dict",
              "_input_type": "DictInput"
            },
            "region_name": {
              "tool_mode": false,
              "trace_as_metadata": true,
              "options": [
                "us-west-2",
                "us-west-1",
                "us-gov-west-1",
                "us-gov-east-1",
                "us-east-2",
                "us-east-1",
                "sa-east-1",
                "me-south-1",
                "me-central-1",
                "il-central-1",
                "eu-west-3",
                "eu-west-2",
                "eu-west-1",
                "eu-south-2",
                "eu-south-1",
                "eu-north-1",
                "eu-central-2",
                "eu-central-1",
                "cn-northwest-1",
                "cn-north-1",
                "ca-west-1",
                "ca-central-1",
                "ap-southeast-5",
                "ap-southeast-4",
                "ap-southeast-3",
                "ap-southeast-2",
                "ap-southeast-1",
                "ap-south-2",
                "ap-south-1",
                "ap-northeast-3",
                "ap-northeast-2",
                "ap-northeast-1",
                "ap-east-1",
                "af-south-1"
              ],
              "options_metadata": [],
              "combobox": false,
              "dialog_inputs": {},
              "toggle": false,
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "region_name",
              "value": "us-east-1",
              "display_name": "Region Name",
              "advanced": false,
              "dynamic": false,
              "info": "The AWS region where your Bedrock resources are located.",
              "title_case": false,
              "external_options": {},
              "type": "str",
              "_input_type": "DropdownInput"
            },
            "stream": {
              "tool_mode": false,
              "trace_as_metadata": true,
              "list": false,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "stream",
              "value": false,
              "display_name": "Stream",
              "advanced": true,
              "dynamic": false,
              "info": "Stream the response from the model. Streaming works only in Chat.",
              "title_case": false,
              "type": "bool",
              "_input_type": "BoolInput"
            },
            "system_message": {
              "tool_mode": false,
              "trace_as_input": true,
              "multiline": true,
              "trace_as_metadata": true,
              "load_from_db": false,
              "list": false,
              "list_add_label": "Add More",
              "required": false,
              "placeholder": "",
              "show": true,
              "name": "system_message",
              "value": "Você é um assistente útil",
              "display_name": "System Message",
              "advanced": false,
              "input_types": [
                "Message"
              ],
              "dynamic": false,
              "info": "System message to pass to the model.",
              "title_case": false,
              "copy_field": false,
              "type": "str",
              "_input_type": "MultilineInput"
            }
          },
          "description": "Generate text using Amazon Bedrock LLMs.",
          "icon": "Amazon",
          "base_classes": [
            "LanguageModel",
            "Message"
          ],
          "display_name": "Amazon Bedrock",
          "documentation": "",
          "minimized": false,
          "custom_fields": {},
          "output_types": [],
          "pinned": false,
          "conditional_paths": [],
          "frozen": false,
          "outputs": [
            {
              "types": [
                "Message"
              ],
              "name": "text_output",
              "display_name": "Model Response",
              "method": "text_response",
              "value": "__UNDEFINED__",
              "cache": true,
              "allows_loop": false,
              "group_outputs": false,
              "tool_mode": true
            },
            {
              "types": [
                "LanguageModel"
              ],
              "selected": "LanguageModel",
              "name": "model_output",
              "display_name": "Language Model",
              "method": "build_model",
              "value": "__UNDEFINED__",
              "cache": true,
              "allows_loop": false,
              "group_outputs": false,
              "tool_mode": true
            }
          ],
          "field_order": [
            "input_value",
            "system_message",
            "stream",
            "model_id",
            "aws_access_key_id",
            "aws_secret_access_key",
            "aws_session_token",
            "credentials_profile_name",
            "region_name",
            "model_kwargs",
            "endpoint_url"
          ],
          "beta": false,
          "legacy": false,
          "edited": false,
          "metadata": {
            "keywords": [
              "model",
              "llm",
              "language model",
              "large language model"
            ]
          },
          "tool_mode": false,
          "lf_version": "1.6.5"
        },
        "showNode": true,
        "type": "AmazonBedrockModel",
        "id": "AmazonBedrockModel-Ov0p3",
        "selected_output": "model_output"
      },
      "selected": false,
      "measured": {
        "width": 320,
        "height": 699
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "id": "reactflow__edge-ChatInput-AuPr0{œdataTypeœ:œChatInputœ,œidœ:œChatInput-AuPr0œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-UaCUV{œfieldNameœ:œinput_valueœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
      "data": {
        "sourceHandle": {
          "id": "ChatInput-AuPr0",
          "name": "message",
          "dataType": "ChatInput",
          "output_types": [
            "Message"
          ]
        },
        "targetHandle": {
          "id": "Agent-UaCUV",
          "type": "str",
          "fieldName": "input_value",
          "inputTypes": [
            "Message"
          ]
        }
      },
      "source": "ChatInput-AuPr0",
      "target": "Agent-UaCUV",
      "animated": false,
      "selected": false,
      "className": "",
      "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-AuPr0œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
      "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
    },
    {
      "id": "reactflow__edge-URLComponent-RtzkE{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-RtzkEœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-UaCUV{œfieldNameœ:œtoolsœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
      "data": {
        "sourceHandle": {
          "id": "URLComponent-RtzkE",
          "name": "component_as_tool",
          "dataType": "URLComponent",
          "output_types": [
            "Tool"
          ]
        },
        "targetHandle": {
          "id": "Agent-UaCUV",
          "type": "other",
          "fieldName": "tools",
          "inputTypes": [
            "Tool"
          ]
        }
      },
      "source": "URLComponent-RtzkE",
      "target": "Agent-UaCUV",
      "animated": false,
      "selected": false,
      "className": "",
      "sourceHandle": "{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-RtzkEœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
      "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
    },
    {
      "id": "xy-edge__Agent-UaCUV{œdataTypeœ:œAgentœ,œidœ:œAgent-UaCUVœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-lubPZ{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-lubPZœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
      "data": {
        "sourceHandle": {
          "id": "Agent-UaCUV",
          "name": "response",
          "dataType": "Agent",
          "output_types": [
            "Message"
          ]
        },
        "targetHandle": {
          "id": "ChatOutput-lubPZ",
          "type": "other",
          "fieldName": "input_value",
          "inputTypes": [
            "Data",
            "DataFrame",
            "Message"
          ]
        }
      },
      "source": "Agent-UaCUV",
      "target": "ChatOutput-lubPZ",
      "animated": false,
      "selected": false,
      "className": "",
      "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-UaCUVœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
      "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-lubPZœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
    },
    {
      "source": "AmazonBedrockModel-Ov0p3",
      "sourceHandle": "{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-Ov0p3œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
      "target": "Agent-UaCUV",
      "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
      "data": {
        "targetHandle": {
          "fieldName": "agent_llm",
          "id": "Agent-UaCUV",
          "inputTypes": [
            "LanguageModel"
          ],
          "type": "str"
        },
        "sourceHandle": {
          "dataType": "AmazonBedrockModel",
          "id": "AmazonBedrockModel-Ov0p3",
          "name": "model_output",
          "output_types": [
            "LanguageModel"
          ]
        }
      },
      "id": "xy-edge__AmazonBedrockModel-Ov0p3{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-Ov0p3œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-UaCUV{œfieldNameœ:œagent_llmœ,œidœ:œAgent-UaCUVœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
      "selected": false,
      "animated": false,
      "className": ""
    }
  ],
  "viewport": {
    "x": -110.66793769641981,
    "y": 104.59138558060658,
    "zoom": 0.5688234434535704
  }
}
